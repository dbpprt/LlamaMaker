name: Docker image build and publish
on: push

env:
  ACCOUNT_ID: 271150355607
  REGION: us-east-1
  ROLE: arn:aws:iam::271150355607:role/service-role/codebuild-LlamaMaker-service-role
  DOCKERFILE: Dockerfile
  LIFECYCLE_POLICY: ../docker/policy.json
  TERRAFORM_S3_BUCKET: dbpprt-ai

# concurrency required to avoid terraform lock contention during ECR provisioning
concurrency: ci-${{ github.repository }}-docker-pipeline

jobs:
  docker:
    runs-on: codebuild-LlamaMaker-${{ github.run_id }}-${{ github.run_attempt }}

    permissions:
      id-token: write
      contents: read

    outputs:
      image_tag: ${{ steps.build-publish.outputs.image_tag }}
      full_image: ${{ steps.build-publish.outputs.full_image }}

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: prepare ECR repo name based on the Github repository
        shell: bash
        run: |
          set -eux
          # lowercase the name
          repo="${GITHUB_REPOSITORY,,}"

          # replace / with _
          echo "ECR_REPO_NAME=${repo//\//_}" >> $GITHUB_ENV

      - name: TF init
        shell: bash
        run: |
          set -eux
          terraform -chdir=docker init -upgrade -reconfigure \
            -backend-config='skip_metadata_api_check=true' \
            -backend-config='skip_region_validation=true' \
            -backend-config='skip_credentials_validation=true' \
            -backend-config='region=${{ env.REGION }}' \
            -backend-config='bucket=${{ env.TERRAFORM_S3_BUCKET }}' \
            -backend-config='key=docker-ecr/terraform-${{ env.ECR_REPO_NAME }}.tfstate' \
        working-directory: ${{ github.action_path }}

      - name: ls
        run: |
          ls -a

      - name: Create ECR repo [TF apply]
        shell: bash
        run: |
          set -eux
          terraform -chdir=docker apply \
            -var 'repository_name=${{ env.ECR_REPO_NAME }}' \
            -var 'lifecycle_policy=$LIFECYCLE_POLICY' \
            -var 'iam_role=$ROLE' \
            -var 'aws_account_id=${{ env.ACCOUNT_ID }}' \
            -auto-approve
        # working-directory: ${{ github.action_path }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ env.ACCOUNT_ID }}
          mask-password: "true" # see: https://github.com/aws-actions/amazon-ecr-login#docker-credentials

      - name: Login to Amazon SageMaker ECR
        id: login-sagemaker-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: 763104351884
          mask-password: "true" # see: https://github.com/aws-actions/amazon-ecr-login#docker-credentials

      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build "./" -f "${{ env.DOCKERFILE }}" -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG" 
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"